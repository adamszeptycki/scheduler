#!/usr/bin/env python3

"Schedule a bunch of desired meetings."

from apiclient.discovery import build
from credentials import creds
from datetime import datetime, time, timedelta, timezone
from httplib2 import Http

import arrow

debug = False

class Interval():

    "Represent a time interval as start (inclusive) and end (exlcusive)."

    def __init__(self, start, end):
        self.start = start
        self.end = end

    def __eq__(self, other):
        return self.start == other.start and self.end == other.end

    def __hash__(self):
        return hash((self.start, self.end))

    def __repr__(self):
        return '{} to {}'.format(self.start.isoformat(), self.end.isoformat())

    def before(self, other):
        return self.end <= other.start

    def after(self, other):
        return self.start >= other.end

    def overlaps(self, other):
        return not (self.before(other) or self.after(other))

    def from_calendar(cal):
        return Interval(arrow.get(cal['start']), arrow.get(cal['end']))


def busy(emails, start_day, start_time, end_time, days):
    "Map of intervals each person is busy according to their calendar."

    service = build('calendar', 'v3', http=creds.authorize(Http()))

    data = service.freebusy().query(body = {
        'timeMin': datetime.combine(start_day, start_time).isoformat(),
        'timeMax': datetime.combine(start_day + timedelta(days=days), end_time).isoformat(),
        'items': [ { 'id': e } for e in emails ],
        'timeZone': '-07:00'
    }).execute()

    return {
        name : [ Interval.from_calendar(x) for x in x['busy'] ]
        for name, x in data['calendars'].items()
    }


def slots(start_day, start_time, end_time, days=1, minutes=30, increment=15, daysofweek={0,1,2,3,4}):
    "Get all slots during working hours in a given time range."
    ss = []
    for d in range(days):
        day = start_day + timedelta(days=d)
        if day.weekday() in daysofweek:
            start  = datetime.combine(day, start_time)
            end    = datetime.combine(day, end_time)
            length = timedelta(minutes=minutes)
            incr   = timedelta(minutes=increment)

            s = start
            while s < end:
                e = s + length
                ss.append(Interval(s, e))
                s += incr
    return ss


def schedules(meetings):
    "Generator of all possible schedules."

    if debug:
        print('Searching')
        if meetings !=  None:
            for m in sorted(meetings, key = lambda m: len(meetings[m])):
                if len(meetings[m]) == 1:
                    print('{}, scheduled!'.format(m))
                else:
                    print('{}, {} slots left'.format(m, len(meetings[m])))
            print('')
        else:
            print('meetings is None')

    if meetings is None:
        return None

    elif all_scheduled(meetings):
        yield to_schedule(meetings)

    else:
        unscheduled = [ m for m in meetings if len(meetings[m]) > 1 ]
        for m in sorted(unscheduled, key=lambda m: len(meetings[m])):
            for s in sorted(meetings[m], key=lambda s: s.start):
                yield from schedules(assign(copy_meetings(meetings), m, s))


def all_scheduled(meetings):
    return all(len(slots) == 1 for slots in meetings.values())


def to_schedule(meetings):
    return sorted(((m, item(slots)) for m, slots in meetings.items()), key=lambda x: x[1].start)


def copy_meetings(meetings):
    return { m : set(s) for m, s in meetings.items() }


def assign(meetings, m, s):
    "Assign slot s to meeting m, propagating consequences."
    if debug: print('Assinging {} to {}'.format(s, m))
    return meetings if eliminate(meetings, m, lambda x: x != s) else None


def eliminate(meetings, m, fn):
    "Eliminate slots from meeting m and propagate consequences."
    to_eliminate = { s for s in meetings[m] if fn(s) }
    if to_eliminate:
        if debug: print('Eliminating {} from {}'.format(to_eliminate, m))
        meetings[m] -= to_eliminate

        if len(meetings[m]) == 0:
            return None
        elif len(meetings[m]) == 1:
            s2 = item(meetings[m])
            other_meetings = [ m2 for m2 in meetings if m2 != m ]
            if not all(eliminate(meetings, m2, lambda x: x.overlaps(s2)) for m2 in other_meetings):
                return None

    return meetings


def item(s):
    return next(iter(s))


def schedule(meetings, start_day, start_time, end_time, days):
    "Find the first possible schedule for the set of meetings."
    emails     = set(a for m in meetings.values() for a in m['attendees'])
    busy_times = busy(emails, start_day, start_time, end_time, days)
    s = { id : set(slots(start_day, start_time, end_time, days, m['minutes'])) for id, m in meetings.items() }
    for id, m in meetings.items():
        s = set_slots(id, m['attendees'], busy_times, s)
    return next(schedules(s))


def set_slots(m, attendees, busy, meetings):
    for a in attendees:
        to_eliminate = busy_slots(sorted(meetings[m], key = lambda x: x.start), busy[a])
        if not eliminate(meetings, m, lambda x: x in to_eliminate):
            return None
    return meetings


def busy_slots(slots, busy):
    "Find intervals in slots that overlap busy intervals."

    def walk(slots, busy):
        while slots and busy:
            s = slots[0]
            b = busy[0]
            if s.before(b):
                slots.pop(0)
            elif s.after(b):
                busy.pop(0)
            else:
                yield slots.pop(0)

    return list(walk(slots[:], busy[:]))


if __name__ == '__main__':

    import fileinput
    import re
    import sys

    pacific    = timezone(timedelta(hours=-7))
    start_day  = datetime.today()
    start_time = time(9, 0, tzinfo=pacific)
    end_time   = time(14, 0, tzinfo=pacific)
    days       = 60

    pat = re.compile(r'^\[(\d+)\] *(.*?): *(.*)$')

    def to_meeting(line):
        m = pat.match(line)
        return {
            'summary': m.group(2),
            'attendees': re.split(r', *', m.group(3)),
            'minutes': int(m.group(1))
        }

    meetings = { id: to_meeting(line[:-1]) for id, line in enumerate(fileinput.input()) }

    sched = schedule(meetings, start_day, start_time, end_time, days)

    if sched is None:
        print('No way to schedule all meetings. Maybe time to become a goat farmer.')
    else:
        for id, s in sched:
            print('{:30} {} to {}'.format(
                meetings[id]['summary'],
                s.start.strftime('%a, %b %d %I:%M %p'),
                s.end.strftime('%I:%M %p (%Z)')))
